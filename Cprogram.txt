1.字符数组和字符串到底有啥不一样
而字符串虽然也是一连排的小箱子，小箱子里存的也是字符，但是除了存字符的小箱子外还必须在所有箱子的最后还有一个空箱子来存放"\0"。
前面我们说过"\0"是结束符，它就代表着字符串到这里就结束了。
"\0"是字符数组和字符串的最大差别，存相同的东西，字符串的长度会比字符数组多一个。
我们可以试着把cArr和sArr的长度打印出来看看，这里我们就要学习另外一个新的语句叫sizeof()

2.给二维数组赋值有两种方式：
a、按行分段赋值可写为:
int a[3][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};

b、按行连续赋值可写为:
int a[3][4]={ 1,2,3,4,5,6,7,8,9,10,11,12 };
当然也可以先声明一个二维数组，然后再a[0][0]…a[2][3]一个一个的进行赋值也可以。

3.重点  指针 *
C语言中变量、数组或者函数都是存放在计算机内存中的，内存中存放的位置叫做地址，地址是有一系列的编号组成的，通常地址又可以叫做指针。
就像是一本书，书上都有目录，通过目录就能找到我们想要的内容。指针的作用就像目录一样，是一个指向的作用，我们能通过指针找到我们想要的内容。

我们允许用一个变量来存放指针，这个变量被称为指针变量。
那一个指针变量该怎么使用呢？C语言中使用“*”来标记这种变量。指针变量跟其他变量一样也分为不同的数据类型：
int *p1;   //指向整型变量的指针变量p1
float *p2; //指向浮点型变量的指针变量p2
char *p3;  //指向字符型变量的指针变量p3

4."&"叫取地址运算符
在C语言中取得一个变量的地址使用"&"这个符号，"&"叫取地址运算符，比如一个变量int a, &a就是取得变量a所存放的地址。由于指针就是地址，所以：
p1 = &a;  
//这是声明指针变量后对其进行初始化
int a = 11, *p1 = &a;
//这是在声明指针变量时就对其进行初始化 
注意：
1、指针声明后必须对它进行初始化，否则就是野指针危害很大
2、指针初始化时只能指向地址，不能指向数据。如：p1 = a和p1 = 11都是不正确的。


5.野指针和NULL
声明一个指针后并未对它进行初始化，这样的指针称为野指针，野指针是不能被使用的，因为它指向的空间并不可用，因此在C语言中野指针是非常危险的。
通常情况下我们声明一个指针后如果暂不使用，可以给这个指针赋值为NULL。
前面我们讲过指针都是指向地址的，有些情况下是我们先申请内存再往这块内存里面存数据。C语言提供一个分配内存的函数--malloc函数，这个函数的使用方法：
p = (char *)malloc(100);  读法:麦捞克...    mai lao ke  
p是一个char型的指针，(char *)括号中的char类型要与指针p的类型保持一致，malloc后面的括号中的数字是你想分配内存的大小。
内存分配使用完之后还要将这个内存释放掉，这叫过河拆桥，而且桥一定要拆掉才行。释放函数就会free(),使用方法：
free(p);
注意：malloc和free必须是成对出现的，分配完内存后必须记得释放。
#include <stdio.h>
#include <stdlib.h>
int main(void)
?{
    char *p;
    p = (char *)malloc(1);  //动态分配内存

    /*分配内存后如果指针还为NULL就是没有分配成功*/
    if (p == NULL) {
        printf("内存分配失败。");
        exit(-1);  //退出
    }

    *p = 'c';
    printf(" p指针中的内容=%c ",*p);
    free(p);   //内存释放
    return 0;
}
上面的程序就是一个内存分配、使用、释放的过程，内存分配后都会对其进行判断是否分配成功，如果分配不成功程序退出。


6.数组指针和指针数组

7.c语言中，void是空的意思，代表函数类型是无返回值类型，免用return语句

8.函数的类型和函数的返回值类型是一致的，那指针函数是不是返回值是指针类型的呢？非常正确。指针函数就是函数类型和返回值都是指针的函数，指针函数的一般形式：
类型 * 函数名（参数列表）

9.指针函数和函数指针
a.指针函数是指带指针的函数，即本质是一个函数。函数返回类型是某一类型的指针
	int *f(x，y);
b.函数指针是指向函数的指针变量，即本质是一个指针变量。
	int (*f) (int x); /* 声明一个函数指针 */
	f=func; /* 将func函数的首地址赋给指针f */ 
